{"version":3,"sources":["actions.js","reducers.js","store.js","helpers/shuffleArray.js","actionCreators.js","components/Timer.js","helpers/unescapeHTML.js","components/QuestionResult.js","components/Quiz.js","components/QuizResult.js","components/App.js","serviceWorker.js","index.js"],"names":["INVALIDATE_CATEGORY","RECEIVE_QUESTIONS","REQUEST_QUESTIONS","SELECT_CATEGORY","SET_CURRENT_ANSWER_STATUS","SET_CURRENT_QUESTION_INDEX","SET_OPTIONS_DISABLED","SET_OUT_OF_TIME","SET_DISPLAY_ANSWER_RESPONSE","SET_GAME_OVER","SET_PREPARED_QUESTIONS","SET_SCORE","SET_SELECTED_OPTION","SET_QUESTION_NUMBER","SET_QUESTIONS_PER_ROUND","SET_USED_QUESTIONS","rootReducer","combineReducers","currentAnswerStatus","state","arguments","length","undefined","action","type","payload","currentQuestionIndex","displayAnswerResponse","gameOver","optionsDisabled","outOfTime","preparedQuestions","selectedCategory","category","score","selectedOption","questions","isFetching","didInvalidate","items","Object","assign","lastUpdated","receivedAt","questionNumber","questionsPerRound","parseInt","process","usedQuestions","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","shuffleArray","unprocessedArray","temporaryValue","randomIndex","currentIndex","processedArray","Math","floor","random","fetchQuestions","dispatch","requestQuestions","fetch","concat","then","response","json","error","console","results","Date","now","receiveQuestions","setCurrentAnswerStatus","value","setCurrentQuestionIndex","index","setDisplayAnswerResponse","setGameOver","setOptionsDisabled","setOutOfTime","setPreparedQuestions","questionsArray","setScore","setSelectedOption","selected","setQuestionNumber","setUsedQuestions","Timer","props","_this","classCallCheck","this","startValueInSeconds","possibleConstructorReturn","getPrototypeOf","call","secondsRemaining","_this2","timerID","setInterval","tick","prevProps","_this$props","addSecondsAmount","reset","setState","clearInterval","_this$props2","onComplete","running","react_default","a","createElement","Component","defaultProps","unescapeHTML","safe","replace","QuestionResult","handleClickNext","handleShowNext","disabled","next","correctAnswer","handleShowResult","Fragment","divider","className","es_button","onClick","connect","handleAnswerState","answerStatus","option","handleQuestionNumber","number","Quiz","handleSelectedAnswer","event","question","answer","correct_answer","target","addUsedQuestions","toConsumableArray","addSecondsEnabled","clickedTen","disabledOptions","fiftyFifty","handleFiftyFifty","bind","assertThisInitialized","handlePlusTen","handleOutOfTime","prevState","_this$state","preventDefault","options","numOptionsToRemove","wrongAnswers","incorrect_answers","i","_this$props3","submitOutOfTime","_this$props4","totalNumberOfQuestions","_this$state2","RadioGroup","Radio","Group","radioStyle","display","height","lineHeight","row","align","col","span","components_Timer","toString","ghost","orientation","onChange","size","buttonStyle","map","es_radio","style","key","indexOf","components_QuestionResult","QuizResult","handleStartOverClick","LogoDiv","styled","div","_templateObject","ScoreDiv","_templateObject2","App","handleFetchQuestions","prepareQuestions","prepareSingleQuestion","handlePreparedQuestions","increaseQuestionIndex","resetUsedQuestions","shuffleQuestions","Content","Layout","Header","Footer","layout","padding","minHeight","marginTop","background","components_QuizResult","components_Quiz","getFullYear","Boolean","location","hostname","match","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8542c6b.chunk.js","sourcesContent":["export const INVALIDATE_CATEGORY = 'INVALIDATE_CATEGORY';\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const SELECT_CATEGORY = 'SELECT_CATEGORY';\nexport const SET_CURRENT_ANSWER_STATUS = 'SET_CURRENT_ANSWER_STATUS';\nexport const SET_CURRENT_QUESTION_INDEX = 'SET_CURRENT_QUESTION_INDEX';\nexport const SET_OPTIONS_DISABLED = 'SET_OPTIONS_DISABLED';\nexport const SET_OUT_OF_TIME = 'SET_OUT_OF_TIME';\nexport const SET_DISPLAY_ANSWER_RESPONSE = 'SET_DISPLAY_ANSWER_RESPONSE';\nexport const SET_GAME_OVER = 'SET_GAME_OVER';\nexport const SET_PREPARED_QUESTIONS = 'SET_PREPARED_QUESTIONS';\nexport const SET_SCORE = 'SET_SCORE';\nexport const SET_SELECTED_OPTION = 'SET_SELECTED_OPTION';\nexport const SET_QUESTION_NUMBER = 'SET_QUESTION_NUMBER';\nexport const SET_QUESTIONS_PER_ROUND = 'SET_QUESTIONS_PER_ROUND';\nexport const SET_USED_QUESTIONS = 'SET_USED_QUESTIONS';\n","import { combineReducers } from 'redux';\nimport {\n  INVALIDATE_CATEGORY,\n  RECEIVE_QUESTIONS,\n  REQUEST_QUESTIONS,\n  SELECT_CATEGORY,\n  SET_CURRENT_ANSWER_STATUS,\n  SET_CURRENT_QUESTION_INDEX,\n  SET_DISPLAY_ANSWER_RESPONSE,\n  SET_GAME_OVER,\n  SET_OPTIONS_DISABLED,\n  SET_OUT_OF_TIME,\n  SET_PREPARED_QUESTIONS,\n  SET_SCORE,\n  SET_SELECTED_OPTION,\n  SET_QUESTIONS_PER_ROUND,\n  SET_USED_QUESTIONS,\n  SET_QUESTION_NUMBER\n} from './actions';\n\nconst selectedCategory = (state = '18', action) => {\n  // '18' is topic \"Science: Computers\"\n  switch (action.type) {\n    case SELECT_CATEGORY:\n      return action.category;\n    default:\n      return state;\n  }\n};\nconst questions = (state = { isFetching: false, didInvalidate: false, items: [] }, action) => {\n  switch (action.type) {\n    case INVALIDATE_CATEGORY:\n      return Object.assign({}, state, { didInvalidate: true });\n    case REQUEST_QUESTIONS:\n      return Object.assign({}, state, { isFetching: true, didInvalidate: false });\n    case RECEIVE_QUESTIONS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.questions,\n        lastUpdated: action.receivedAt\n      });\n    default:\n      return state;\n  }\n};\nconst currentAnswerStatus = (state = '', action) => {\n  if (action.type === SET_CURRENT_ANSWER_STATUS) {\n    return action.payload;\n  }\n  return state;\n};\nconst currentQuestionIndex = (state = 0, action) => {\n  if (action.type === SET_CURRENT_QUESTION_INDEX) {\n    return action.payload;\n  }\n  return state;\n};\nconst displayAnswerResponse = (state = false, action) => {\n  if (action.type === SET_DISPLAY_ANSWER_RESPONSE) {\n    return action.payload;\n  }\n  return state;\n};\nconst gameOver = (state = false, action) => {\n  if (action.type === SET_GAME_OVER) {\n    return action.payload;\n  }\n  return state;\n};\nconst optionsDisabled = (state = false, action) => {\n  if (action.type === SET_OPTIONS_DISABLED) {\n    return action.payload;\n  }\n  return state;\n};\nconst outOfTime = (state = false, action) => {\n  if (action.type === SET_OUT_OF_TIME) {\n    return action.payload;\n  }\n  return state;\n};\nconst preparedQuestions = (state = [], action) => {\n  if (action.type === SET_PREPARED_QUESTIONS) {\n    return action.payload;\n  }\n  return state;\n};\nconst score = (state = 0, action) => {\n  if (action.type === SET_SCORE) {\n    return action.payload;\n  }\n  return state;\n};\nconst selectedOption = (state = '', action) => {\n  if (action.type === SET_SELECTED_OPTION) {\n    return action.payload;\n  }\n  return state;\n};\nconst questionNumber = (state = 1, action) => {\n  if (action.type === SET_QUESTION_NUMBER) {\n    return action.payload;\n  }\n  return state;\n};\nconst questionsPerRound = (\n  state = parseInt(process.env.REACT_APP_QUESTIONS_PER_ROUND, 10),\n  action\n) => {\n  if (action.type === SET_QUESTIONS_PER_ROUND) {\n    return action.payload;\n  }\n  return state;\n};\nconst usedQuestions = (state = [], action) => {\n  if (action.type === SET_USED_QUESTIONS) {\n    return action.payload;\n  }\n  return state;\n};\n\nconst rootReducer = combineReducers({\n  currentAnswerStatus,\n  currentQuestionIndex,\n  displayAnswerResponse,\n  gameOver,\n  optionsDisabled,\n  outOfTime,\n  preparedQuestions,\n  selectedCategory,\n  score,\n  selectedOption,\n  questions,\n  questionNumber,\n  questionsPerRound,\n  usedQuestions\n});\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\n// const store = createStore(\n//   reducer,\n//   compose(\n//     applyMiddleware(thunk),\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n//   )\n// );\n\n/* eslint-disable no-underscore-dangle */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n/* eslint-enable */\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\n// const store = createStore(reducer, compose(applyMiddleware(thunk)));\n/* eslint-enable */\n\nexport default store;\n","/**\n * Shuffle the options of each question.\n * Fisher-Yates (aka Knuth) Shuffle.\n *\n * @param {*} array\n */\nconst shuffleArray = unprocessedArray => {\n  let currentIndex = unprocessedArray.length;\n  let temporaryValue;\n  let randomIndex;\n  const processedArray = unprocessedArray;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = processedArray[currentIndex];\n    processedArray[currentIndex] = processedArray[randomIndex];\n    processedArray[randomIndex] = temporaryValue;\n  }\n  return processedArray;\n};\n\nexport default shuffleArray;\n","import fetch from 'cross-fetch';\nimport {\n  INVALIDATE_CATEGORY,\n  RECEIVE_QUESTIONS,\n  REQUEST_QUESTIONS,\n  SELECT_CATEGORY,\n  SET_CURRENT_ANSWER_STATUS,\n  SET_CURRENT_QUESTION_INDEX,\n  SET_DISPLAY_ANSWER_RESPONSE,\n  SET_GAME_OVER,\n  SET_OPTIONS_DISABLED,\n  SET_OUT_OF_TIME,\n  SET_PREPARED_QUESTIONS,\n  SET_SCORE,\n  SET_SELECTED_OPTION,\n  SET_QUESTION_NUMBER,\n  SET_QUESTIONS_PER_ROUND,\n  SET_USED_QUESTIONS\n} from './actions';\n\nexport function invalidateCategory(category) {\n  return { type: INVALIDATE_CATEGORY, category };\n}\nexport function selectCategory(category) {\n  return { type: SELECT_CATEGORY, category };\n}\nexport function requestQuestions(category) {\n  return { type: REQUEST_QUESTIONS, category };\n}\nexport function receiveQuestions(category, json) {\n  return {\n    type: RECEIVE_QUESTIONS,\n    category,\n    questions: json.results,\n    receivedAt: Date.now()\n  };\n}\nexport function fetchQuestions(category) {\n  return dispatch => {\n    dispatch(requestQuestions(category));\n    return fetch(\n      `https://opentdb.com/api.php?amount=${\n        process.env.REACT_APP_AMOUNT_OF_QUESTIONS\n      }&category=${category}&difficulty=easy`\n    )\n      .then(\n        response => response.json(),\n        error => console.error('An error occured when fetching the questions.') // eslint-disable-line no-console\n      )\n      .then(json => dispatch(receiveQuestions(category, json)));\n  };\n}\nexport function setCurrentAnswerStatus(value) {\n  return { type: SET_CURRENT_ANSWER_STATUS, payload: value };\n}\nexport function setCurrentQuestionIndex(index) {\n  return { type: SET_CURRENT_QUESTION_INDEX, payload: index };\n}\nexport function setDisplayAnswerResponse(value) {\n  return { type: SET_DISPLAY_ANSWER_RESPONSE, payload: value };\n}\nexport function setGameOver(value) {\n  return { type: SET_GAME_OVER, payload: value };\n}\nexport function setOptionsDisabled(state) {\n  return { type: SET_OPTIONS_DISABLED, payload: state };\n}\nexport function setOutOfTime(state) {\n  return { type: SET_OUT_OF_TIME, payload: state };\n}\nexport function setPreparedQuestions(questionsArray) {\n  return { type: SET_PREPARED_QUESTIONS, payload: questionsArray };\n}\nexport function setScore(score) {\n  return { type: SET_SCORE, payload: score };\n}\nexport function setSelectedOption(selected) {\n  return { type: SET_SELECTED_OPTION, payload: selected };\n}\nexport function setQuestionNumber(questionNumber) {\n  return { type: SET_QUESTION_NUMBER, payload: questionNumber };\n}\nexport function setQuestionsPerRound(numberOfQuestions) {\n  return { type: SET_QUESTIONS_PER_ROUND, payload: numberOfQuestions };\n}\nexport function setUsedQuestions(usedQuestions) {\n  return { type: SET_USED_QUESTIONS, payload: usedQuestions };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    const { startValueInSeconds } = this.props;\n    this.state = {\n      secondsRemaining: startValueInSeconds\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { addSecondsAmount, reset, startValueInSeconds } = this.props;\n    const { secondsRemaining } = this.state;\n    if (reset !== prevProps.reset) {\n      setInterval(\n        this.setState({\n          secondsRemaining: startValueInSeconds\n        }),\n        10000\n      );\n    }\n    if (addSecondsAmount !== prevProps.addSecondsAmount) {\n      this.setState({\n        secondsRemaining: secondsRemaining + addSecondsAmount\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    const { secondsRemaining } = this.state;\n    const { onComplete, running } = this.props;\n    if (running) {\n      this.setState({\n        secondsRemaining: secondsRemaining - 1\n      });\n      if (secondsRemaining - 1 <= 0) {\n        return onComplete();\n      }\n    }\n  }\n\n  render() {\n    const { secondsRemaining } = this.state;\n    return <div>{`Timer: ${secondsRemaining}`}</div>;\n  }\n}\n\nTimer.propTypes = {\n  addSecondsAmount: PropTypes.number,\n  onComplete: PropTypes.func,\n  reset: PropTypes.string,\n  running: PropTypes.bool,\n  startValueInSeconds: PropTypes.number\n};\n\nTimer.defaultProps = {\n  addSecondsAmount: 0,\n  onComplete: () => 'Timer reached zero and stopped.',\n  reset: '0',\n  running: true,\n  startValueInSeconds: 15\n};\n\nexport default Timer;\n","const unescapeHTML = safe =>\n  safe\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#039;/g, \"'\");\n\nexport default unescapeHTML;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Divider, Button } from 'antd';\nimport {\n  setCurrentAnswerStatus,\n  setCurrentQuestionIndex,\n  setDisplayAnswerResponse,\n  setGameOver,\n  setOptionsDisabled,\n  setOutOfTime,\n  setQuestionNumber,\n  setScore,\n  setSelectedOption\n} from '../actionCreators';\nimport unescapeHTML from '../helpers/unescapeHTML';\n\nclass QuestionResult extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      next: true\n    };\n  }\n\n  handleClickNext = () => {\n    const { currentQuestionIndex, handleShowNext, questionNumber } = this.props;\n    this.setState({\n      disabled: false,\n      selected: 1\n    });\n    handleShowNext(currentQuestionIndex, false, '1', questionNumber);\n  };\n\n  render() {\n    const { currentAnswerStatus, correctAnswer, handleShowResult, next, outOfTime } = this.props;\n\n    return (\n      <>\n        <Divider />\n        {outOfTime && currentAnswerStatus === '' ? (\n          <div className=\"out-of-time\">You're out of time!</div>\n        ) : (\n          <div className=\"answer-response\">\n            Your answer is:\n            <b>{` ${currentAnswerStatus}. `}</b>\n            {currentAnswerStatus !== 'right' ? (\n              <div>\n                {`The right answer is: `}\n                <b>{unescapeHTML(correctAnswer)}</b>\n              </div>\n            ) : null}\n          </div>\n        )}\n        <Divider />\n        {next ? (\n          <Button type=\"primary\" onClick={this.handleClickNext}>\n            Next question\n          </Button>\n        ) : (\n          <Button type=\"primary\" onClick={handleShowResult}>\n            Result\n          </Button>\n        )}\n      </>\n    );\n  }\n}\n\nQuestionResult.propTypes = {\n  currentAnswerStatus: PropTypes.string,\n  correctAnswer: PropTypes.string,\n  handleShowResult: PropTypes.func.isRequired,\n  next: PropTypes.bool,\n  outOfTime: PropTypes.bool\n};\n\nQuestionResult.defaultProps = {\n  currentAnswerStatus: '',\n  correctAnswer: '',\n  next: true,\n  outOfTime: false\n};\n\nconst mapStateToProps = state => ({\n  currentAnswerStatus: state.currentAnswerStatus,\n  currentQuestionIndex: state.currentQuestionIndex,\n  outOfTime: state.outOfTime,\n  questionNumber: state.questionNumber\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleAnswerState(score, answerStatus, selected) {\n    dispatch(setScore(score));\n    dispatch(setCurrentAnswerStatus(answerStatus));\n    dispatch(setSelectedOption(selected));\n    dispatch(setDisplayAnswerResponse(true));\n  },\n  handleShowNext(index, disabled, option, questionNumber) {\n    dispatch(setCurrentAnswerStatus(''));\n    dispatch(setOptionsDisabled(disabled));\n    dispatch(setOutOfTime(false));\n    dispatch(setSelectedOption(option));\n    dispatch(setDisplayAnswerResponse(false));\n    dispatch(setCurrentQuestionIndex(index + 1));\n    dispatch(setQuestionNumber(questionNumber + 1));\n  },\n  handleShowResult() {\n    dispatch(setGameOver(true));\n  },\n  handleQuestionNumber(number) {\n    dispatch(setQuestionNumber(number));\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuestionResult);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Divider, Radio, Row } from 'antd';\nimport Timer from './Timer';\nimport QuestionResult from './QuestionResult';\nimport {\n  setCurrentAnswerStatus,\n  setDisplayAnswerResponse,\n  setGameOver,\n  setOptionsDisabled,\n  setOutOfTime,\n  setScore,\n  setSelectedOption,\n  setUsedQuestions\n} from '../actionCreators';\nimport unescapeHTML from '../helpers/unescapeHTML';\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      addSecondsAmount: 0,\n      addSecondsEnabled: false,\n      clickedTen: false,\n      disabledOptions: [],\n      fiftyFifty: false\n    };\n\n    this.handleFiftyFifty = this.handleFiftyFifty.bind(this);\n    this.handlePlusTen = this.handlePlusTen.bind(this);\n    this.handleOutOfTime = this.handleOutOfTime.bind(this);\n  }\n\n  componentDidUpdate(prevState) {\n    const { addSecondsEnabled, clickedTen } = this.state;\n\n    if (clickedTen && addSecondsEnabled) {\n      this.setState({\n        addSecondsEnabled: false,\n        addSecondsAmount: 0\n      });\n    }\n  }\n\n  handleSelectedAnswer = event => {\n    const { handleAnswerState, score, question, usedQuestions } = this.props;\n    const answer = unescapeHTML(question.correct_answer);\n    const selectedOption = unescapeHTML(event.target.value);\n    const addUsedQuestions = [...usedQuestions, question.question];\n\n    if (selectedOption === answer) {\n      handleAnswerState(score + 1, 'right', selectedOption, true, addUsedQuestions);\n    } else {\n      handleAnswerState(score, 'wrong', selectedOption, true, addUsedQuestions);\n    }\n  };\n\n  handleFiftyFifty(event) {\n    event.preventDefault();\n    const { options, outOfTime, question } = this.props;\n    if (!outOfTime && options.length > 3) {\n      event.target.disabled = true;\n      let { disabledOptions } = this.state;\n\n      const numOptionsToRemove = (options.length / 2) % options.length;\n      const wrongAnswers = question.incorrect_answers;\n\n      for (let i = 0; i < numOptionsToRemove; i++) {\n        disabledOptions = [...disabledOptions, wrongAnswers[i]];\n      }\n      this.setState({\n        disabledOptions,\n        fiftyFifty: true\n      });\n    }\n  }\n\n  handlePlusTen(event) {\n    event.preventDefault();\n    const { outOfTime } = this.props;\n    if (!outOfTime) {\n      event.target.disabled = true;\n      this.setState({\n        clickedTen: true,\n        addSecondsAmount: 10,\n        addSecondsEnabled: true\n      });\n    }\n  }\n\n  handleOutOfTime() {\n    const { question, usedQuestions, submitOutOfTime } = this.props;\n    const addUsedQuestions = [...usedQuestions, question.question];\n    submitOutOfTime(addUsedQuestions);\n  }\n\n  render() {\n    const {\n      currentQuestionIndex,\n      displayAnswerResponse,\n      next,\n      options,\n      optionsDisabled,\n      question,\n      questionNumber,\n      selectedOption,\n      totalNumberOfQuestions\n    } = this.props;\n\n    const { addSecondsAmount, clickedTen, disabledOptions, fiftyFifty } = this.state;\n\n    const RadioGroup = Radio.Group;\n\n    const radioStyle = {\n      display: 'block',\n      height: '40px',\n      lineHeight: '40px'\n    };\n\n    return (\n      <div className=\"question-wrapper\">\n        <Row type=\"flex\" align=\"middle\">\n          <Col span={12}>\n            <Timer\n              addSecondsAmount={addSecondsAmount}\n              onComplete={this.handleOutOfTime}\n              reset={currentQuestionIndex.toString()}\n              running={!optionsDisabled}\n            />\n          </Col>\n          <Col span={12} className=\"lifelines\">\n            <Button\n              type=\"primary\"\n              onClick={this.handlePlusTen}\n              disabled={clickedTen}\n              ghost\n              className=\"lifeline-button\"\n            >\n              +10 seconds\n            </Button>\n            <Button\n              type=\"primary\"\n              onClick={this.handleFiftyFifty}\n              disabled={fiftyFifty}\n              ghost\n              className=\"lifeline-button\"\n            >\n              50/50\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Divider orientation=\"left\">\n              {`Question ${questionNumber}/${totalNumberOfQuestions}`}\n            </Divider>\n            <div className=\"question\">{unescapeHTML(question.question)}</div>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <div className=\"answers\">\n              <RadioGroup\n                onChange={this.handleSelectedAnswer}\n                size=\"large\"\n                value={selectedOption}\n                buttonStyle=\"solid\"\n                disabled={optionsDisabled}\n              >\n                {options.map(option => (\n                  <Radio\n                    value={option}\n                    style={radioStyle}\n                    key={option}\n                    disabled={disabledOptions.indexOf(option) > -1}\n                  >\n                    {unescapeHTML(option)}\n                  </Radio>\n                ))}\n              </RadioGroup>\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <div className=\"actions\">\n              {displayAnswerResponse ? (\n                <QuestionResult correctAnswer={question.correct_answer} next={next} />\n              ) : null}\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nQuiz.propTypes = {\n  currentAnswerStatus: PropTypes.string,\n  currentQuestionIndex: PropTypes.number,\n  displayAnswerResponse: PropTypes.bool,\n  handleAnswerState: PropTypes.func.isRequired,\n  handleShowResult: PropTypes.func.isRequired,\n  next: PropTypes.bool,\n  options: PropTypes.array,\n  outOfTime: PropTypes.bool,\n  score: PropTypes.number,\n  question: PropTypes.object.isRequired,\n  questionNumber: PropTypes.number\n};\n\nQuiz.defaultProps = {\n  currentAnswerStatus: '',\n  currentQuestionIndex: 0,\n  displayAnswerResponse: false,\n  score: 0,\n  questionNumber: 1\n};\n\nconst mapStateToProps = state => ({\n  currentAnswerStatus: state.currentAnswerStatus,\n  currentQuestionIndex: state.currentQuestionIndex,\n  displayAnswerResponse: state.displayAnswerResponse,\n  optionsDisabled: state.optionsDisabled,\n  outOfTime: state.outOfTime,\n  score: state.score,\n  selectedOption: state.selectedOption,\n  usedQuestions: state.usedQuestions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleAnswerState(score, answerStatus, selectedOption, optionsDisabled, usedQuestions) {\n    dispatch(setSelectedOption(selectedOption));\n    dispatch(setScore(score));\n    dispatch(setCurrentAnswerStatus(answerStatus));\n    dispatch(setDisplayAnswerResponse(true));\n    dispatch(setOptionsDisabled(optionsDisabled));\n    dispatch(setOutOfTime(true));\n    dispatch(setUsedQuestions(usedQuestions));\n  },\n  handleShowResult() {\n    dispatch(setGameOver(true));\n  },\n  submitOutOfTime(usedQuestions) {\n    dispatch(setOutOfTime(true));\n    dispatch(setOptionsDisabled(true));\n    dispatch(setDisplayAnswerResponse(true));\n    dispatch(setUsedQuestions(usedQuestions));\n  }\n});\nexport const Unwrapped = Quiz;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Quiz);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Row, Col } from 'antd';\nimport {\n  fetchQuestions,\n  setCurrentAnswerStatus,\n  setCurrentQuestionIndex,\n  setDisplayAnswerResponse,\n  setGameOver,\n  setOptionsDisabled,\n  setOutOfTime,\n  setScore,\n  setQuestionNumber\n} from '../actionCreators';\n\nconst QuizResult = props => {\n  const { score, wrongAnswers, handleStartOverClick } = props;\n\n  return (\n    <div>\n      <Row>\n        <Col span={24}>\n          <h1>Results</h1>\n          <h3>\n            Your score was:\n            {` ${score}`}\n          </h3>\n          <p>\n            You had\n            {` ${wrongAnswers.length} `}\n            wrong answers.\n          </p>\n          <Button type=\"primary\" onClick={handleStartOverClick}>\n            Start Over\n          </Button>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nQuizResult.propTypes = {\n  handleStartOverClick: PropTypes.func.isRequired,\n  preparedQuestions: PropTypes.array,\n  score: PropTypes.number,\n  wrongAnswers: PropTypes.array\n};\n\nQuizResult.defaultProps = {\n  preparedQuestions: [],\n  score: 0,\n  wrongAnswers: []\n};\n\nconst mapStateToProps = state => ({\n  score: state.score,\n  preparedQuestions: state.preparedQuestions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleStartOverClick() {\n    dispatch(setCurrentQuestionIndex(0));\n    dispatch(setQuestionNumber(1));\n    dispatch(setGameOver(false));\n    dispatch(setCurrentAnswerStatus(''));\n    dispatch(fetchQuestions(18));\n    dispatch(setDisplayAnswerResponse(false));\n    dispatch(setOptionsDisabled(false));\n    dispatch(setOutOfTime(false));\n    dispatch(setScore(0));\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuizResult);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { Layout, Col, Row } from 'antd';\nimport shuffleArray from '../helpers/shuffleArray';\nimport {\n  fetchQuestions,\n  setCurrentQuestionIndex,\n  setPreparedQuestions,\n  setUsedQuestions\n} from '../actionCreators';\nimport Quiz from './Quiz';\nimport QuizResult from './QuizResult';\nimport '../styles/App.css';\n\nconst LogoDiv = styled.div`\n  width: 120px;\n  height: 31px;\n  line-height: 31px;\n  background: rgba(255, 255, 255, 0.2);\n  margin: 16px 24px 16px 0;\n  float: left;\n`;\nconst ScoreDiv = styled.div`\n  width: 120px;\n  height: 31px;\n  line-height: 31px;\n  background: rgba(255, 255, 255, 0.2);\n  margin: 16px 24px 16px 0;\n  float: right;\n  color: white;\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: [],\n      wrongAnswers: []\n    };\n  }\n\n  componentDidMount() {\n    const { handleFetchQuestions } = this.props;\n    handleFetchQuestions();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { currentQuestionIndex, questions, preparedQuestions } = this.props;\n\n    if (questions.length > 0 && prevProps.questions.length <= 0) {\n      this.prepareQuestions();\n    }\n    if (preparedQuestions.length > 0 && prevProps.preparedQuestions.length <= 0) {\n      this.prepareSingleQuestion();\n    }\n    if (currentQuestionIndex !== prevProps.currentQuestionIndex) {\n      this.prepareSingleQuestion();\n    }\n  }\n\n  prepareQuestions() {\n    const { handlePreparedQuestions, questions } = this.props;\n    handlePreparedQuestions(shuffleArray(questions));\n    this.prepareSingleQuestion();\n  }\n\n  prepareSingleQuestion() {\n    const {\n      currentQuestionIndex,\n      increaseQuestionIndex,\n      preparedQuestions,\n      resetUsedQuestions,\n      shuffleQuestions,\n      usedQuestions\n    } = this.props;\n    if (preparedQuestions.length === usedQuestions.length) {\n      if (usedQuestions.length > 0) {\n        shuffleQuestions(shuffleArray(preparedQuestions));\n      }\n      resetUsedQuestions();\n    }\n\n    const question = preparedQuestions[currentQuestionIndex];\n\n    if (question !== undefined) {\n      if (usedQuestions.indexOf(question.question) > -1) {\n        increaseQuestionIndex(currentQuestionIndex + 1);\n      }\n      const options = shuffleArray(question.incorrect_answers.concat(question.correct_answer));\n      this.setState({\n        options\n      });\n    }\n  }\n\n  render() {\n    const { options, wrongAnswers } = this.state;\n    const {\n      currentQuestionIndex,\n      gameOver,\n      preparedQuestions,\n      score,\n      questionNumber,\n      questionsPerRound\n    } = this.props;\n    const { Content, Header, Footer } = Layout;\n    return (\n      <div className=\"App\">\n        <Layout className=\"layout\">\n          <Header>\n            <Row>\n              <Col span={12}>\n                <LogoDiv className=\"logo\">JayQuiz</LogoDiv>\n              </Col>\n              <Col span={12}>\n                <ScoreDiv>{`Score: ${score}`}</ScoreDiv>\n              </Col>\n            </Row>\n          </Header>\n          <Content style={{ padding: '0 24px', minHeight: 280, marginTop: '20px' }}>\n            <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\n              {preparedQuestions.length > 0 ? (\n                <>\n                  {!gameOver ? (\n                    <Quiz\n                      next={questionNumber < questionsPerRound}\n                      options={options}\n                      question={preparedQuestions[currentQuestionIndex]}\n                      questionNumber={questionNumber}\n                      totalNumberOfQuestions={questionsPerRound}\n                    />\n                  ) : (\n                    <QuizResult wrongAnswers={wrongAnswers} />\n                  )}\n                </>\n              ) : (\n                <span>Loading...</span>\n              )}\n            </div>\n          </Content>\n          <Footer>{`JayQuiz ${new Date().getFullYear()}`}</Footer>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentQuestionIndex: state.currentQuestionIndex,\n  gameOver: state.gameOver,\n  preparedQuestions: state.preparedQuestions,\n  score: state.score,\n  questions: state.questions.items,\n  questionNumber: state.questionNumber,\n  questionsPerRound: state.questionsPerRound,\n  usedQuestions: state.usedQuestions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleFetchQuestions() {\n    dispatch(fetchQuestions(18)); // 18 = \"Science: Computers\"\n  },\n  handlePreparedQuestions(preparedQuestions) {\n    dispatch(setPreparedQuestions(preparedQuestions));\n  },\n  increaseQuestionIndex(index) {\n    dispatch(setCurrentQuestionIndex(index));\n  },\n  resetUsedQuestions() {\n    dispatch(setUsedQuestions([]));\n  },\n  shuffleQuestions(questions) {\n    dispatch(setPreparedQuestions(questions));\n  }\n});\n\nApp.propTypes = {\n  currentQuestionIndex: PropTypes.number,\n  gameOver: PropTypes.bool,\n  handleFetchQuestions: PropTypes.func.isRequired,\n  handlePreparedQuestions: PropTypes.func.isRequired,\n  increaseQuestionIndex: PropTypes.func.isRequired,\n  preparedQuestions: PropTypes.array,\n  questions: PropTypes.array,\n  questionNumber: PropTypes.number,\n  questionsPerRound: PropTypes.number,\n  usedQuestions: PropTypes.array\n};\n\nApp.defaultProps = {\n  currentQuestionIndex: 0,\n  gameOver: false,\n  preparedQuestions: [],\n  questions: [],\n  questionNumber: 1,\n  questionsPerRound: 10,\n  usedQuestions: []\n};\n\nexport const Unwrapped = App;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","/* eslint-disable */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}